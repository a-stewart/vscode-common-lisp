const clAccessor: string[] = [
  'aref',
  'caaaar',
  'caaadr',
  'caaar',
  'caadar',
  'caaddr',
  'caadr',
  'caar',
  'cadaar',
  'cadadr',
  'cadar',
  'caddar',
  'cadddr',
  'caddr',
  'cadr',
  'car',
  'cdaaar',
  'cdaadr',
  'cdaar',
  'cdadar',
  'cdaddr',
  'cdadr',
  'cdar',
  'cddaar',
  'cddadr',
  'cddar',
  'cdddar',
  'cddddr',
  'cdddr',
  'cddr',
  'cdr',
  'char',
  'compiler-macro-function',
  'eighth',
  'elt',
  'fdefinition',
  'fifth',
  'fill-pointer',
  'find-class',
  'first',
  'fourth',
  'get',
  'getf',
  'gethash',
  'ldb',
  'logical-pathname-translations',
  'macro-function',
  'mask-field',
  'ninth',
  'nth',
  'readtable-case',
  'rest',
  'row-major-aref',
  'sbit',
  'schar',
  'second',
  'seventh',
  'sixth',
  'subseq',
  'svref',
  'symbol-function',
  'symbol-plist',
  'symbol-value',
  'tenth',
  'third',
  'values',
  'bit'
];
const clClass: string[] = [
  'standard-object',
  'structure-object'
];
const clConditionType: string[] = [
  'arithmetic-error',
  'cell-error',
  'condition',
  'control-error',
  'division-by-zero',
  'end-of-file',
  'file-error',
  'floating-point-inexact',
  'floating-point-invalid-operation',
  'floating-point-overflow',
  'floating-point-underflow',
  'package-error',
  'parse-error',
  'print-not-readable',
  'program-error',
  'reader-error',
  'serious-condition',
  'simple-condition',
  'simple-error',
  'simple-type-error',
  'simple-warning',
  'storage-condition',
  'stream-error',
  'style-warning',
  'type-error',
  'unbound-slot',
  'unbound-variable',
  'undefined-function',
  'warning',
  'error'
];
const clConstantVariable: string[] = [
  'array-dimension-limit',
  'array-rank-limit',
  'array-total-size-limit',
  'boole-1',
  'boole-2',
  'boole-and',
  'boole-andc1',
  'boole-andc2',
  'boole-c1',
  'boole-c2',
  'boole-clr',
  'boole-eqv',
  'boole-ior',
  'boole-nand',
  'boole-nor',
  'boole-orc1',
  'boole-orc2',
  'boole-set',
  'boole-xor',
  'call-arguments-limit',
  'char-code-limit',
  'double-float-epsilon',
  'double-float-negative-epsilon',
  'internal-time-units-per-second',
  'lambda-list-keywords',
  'lambda-parameters-limit',
  'least-negative-double-float',
  'least-negative-long-float',
  'least-negative-normalized-double-float',
  'least-negative-normalized-long-float',
  'least-negative-normalized-short-float',
  'least-negative-normalized-single-float',
  'least-negative-short-float',
  'least-negative-single-float',
  'least-positive-double-float',
  'least-positive-long-float',
  'least-positive-normalized-double-float',
  'least-positive-normalized-long-float',
  'least-positive-normalized-short-float',
  'least-positive-normalized-single-float',
  'least-positive-short-float',
  'least-positive-single-float',
  'long-float-epsilon',
  'long-float-negative-epsilon',
  'most-negative-double-float',
  'most-negative-fixnum',
  'most-negative-long-float',
  'most-negative-short-float',
  'most-negative-single-float',
  'most-positive-double-float',
  'most-positive-fixnum',
  'most-positive-long-float',
  'most-positive-short-float',
  'most-positive-single-float',
  'multiple-values-limit',
  'pi',
  'short-float-epsilon',
  'short-float-negative-epsilon',
  'single-float-epsilon',
  'single-float-negative-epsilon',
  't',
  'nil'
];
const clDeclaration: string[] = [
  'compilation-speed',
  'debug',
  'declaration',
  'dynamic-extent',
  'ftype',
  'ignorable',
  'ignore',
  'inline',
  'notinline',
  'optimize',
  'safety',
  'space',
  'special',
  'speed',
  'type'
];
const clFunction: string[] = [
  '/=',
  '<',
  '<=',
  '=',
  '>',
  '>=',
  '1-',
  '1+',
  'abs',
  'acons',
  'acos',
  'acosh',
  'adjoin',
  'adjustable-array-p',
  'adjust-array',
  'alpha-char-p',
  'alphanumericp',
  'append',
  'apply',
  'apropos',
  'apropos-list',
  'arithmetic-error-operands',
  'arithmetic-error-operation',
  'array-dimension',
  'array-dimensions',
  'array-displacement',
  'array-element-type',
  'array-has-fill-pointer-p',
  'array-in-bounds-p',
  'arrayp',
  'array-rank',
  'array-row-major-index',
  'array-total-size',
  'ash',
  'asin',
  'asinh',
  'assoc',
  'assoc-if',
  'assoc-if-not',
  'atan',
  'atanh',
  'bit-and',
  'bit-andc1',
  'bit-andc2',
  'bit-eqv',
  'bit-ior',
  'bit-nand',
  'bit-nor',
  'bit-not',
  'bit-orc1',
  'bit-orc2',
  'bit-vector-p',
  'bit-xor',
  'boole',
  'both-case-p',
  'boundp',
  'break',
  'broadcast-stream-streams',
  'butlast',
  'byte',
  'byte-position',
  'byte-size',
  'ceiling',
  'cell-error-name',
  'cerror',
  'char/=',
  'char<',
  'char<=',
  'char=',
  'char>',
  'char>=',
  'characterp',
  'char-code',
  'char-downcase',
  'char-equal',
  'char-greaterp',
  'char-int',
  'char-lessp',
  'char-name',
  'char-not-equal',
  'char-not-greaterp',
  'char-not-lessp',
  'char-upcase',
  'cis',
  'class-of',
  'clear-input',
  'clear-output',
  'close',
  'clrhash',
  'code-char',
  'coerce',
  'compile',
  'compiled-function-p',
  'compile-file',
  'compile-file-pathname',
  'complement',
  'complexp',
  'compute-restarts',
  'concatenate',
  'concatenated-stream-streams',
  'conjugate',
  'consp',
  'constantly',
  'constantp',
  'copy-alist',
  'copy-list',
  'copy-pprint-dispatch',
  'copy-readtable',
  'copy-seq',
  'copy-structure',
  'copy-symbol',
  'copy-tree',
  'cos',
  'cosh',
  'count',
  'count-if',
  'count-if-not',
  'decode-float',
  'decode-universal-time',
  'delete',
  'delete-duplicates',
  'delete-file',
  'delete-if',
  'delete-if-not',
  'delete-package',
  'denominator',
  'deposit-field',
  'describe',
  'digit-char',
  'digit-char-p',
  'directory',
  'directory-namestring',
  'disassemble',
  'dpb',
  'dribble',
  'echo-stream-input-stream',
  'echo-stream-output-stream',
  'ed',
  'encode-universal-time',
  'endp',
  'enough-namestring',
  'ensure-directories-exist',
  'ensure-generic-function',
  'eq',
  'equal',
  'equalp',
  'eval',
  'evenp',
  'every',
  'exp',
  'export',
  'expt',
  'fboundp',
  'fceiling',
  'ffloor',
  'file-author',
  'file-error-pathname',
  'file-length',
  'file-namestring',
  'file-position',
  'file-string-length',
  'file-write-date',
  'fill',
  'find',
  'find-all-symbols',
  'find-if',
  'find-if-not',
  'find-package',
  'find-restart',
  'find-symbol',
  'finish-output',
  'float-digits',
  'floatp',
  'float-precision',
  'float-radix',
  'float-sign',
  'floor',
  'fmakunbound',
  'force-output',
  'format',
  'fresh-line',
  'fround',
  'ftruncate',
  'funcall',
  'function-lambda-expression',
  'functionp',
  'gcd',
  'gensym',
  'gentemp',
  'get-decoded-time',
  'get-dispatch-macro-character',
  'get-internal-real-time',
  'get-internal-run-time',
  'get-macro-character',
  'get-output-stream-string',
  'get-properties',
  'get-setf-expansion',
  'get-universal-time',
  'graphic-char-p',
  'hash-table-count',
  'hash-table-p',
  'hash-table-rehash-size',
  'hash-table-rehash-threshold',
  'hash-table-size',
  'hash-table-test',
  'host-namestring',
  'identity',
  'imagpart',
  'import',
  'input-stream-p',
  'inspect',
  'integer-decode-float',
  'integer-length',
  'integerp',
  'interactive-stream-p',
  'intern',
  'intersection',
  'invalid-method-error',
  'invoke-debugger',
  'invoke-restart',
  'invoke-restart-interactively',
  'isqrt',
  'keywordp',
  'last',
  'lcm',
  'ldb-test',
  'ldiff',
  'length',
  'lisp-implementation-type',
  'lisp-implementation-version',
  'list*',
  'list-all-packages',
  'listen',
  'list-length',
  'listp',
  'load',
  'load-logical-pathname-translations',
  'log',
  'logand',
  'logandc1',
  'logandc2',
  'logbitp',
  'logcount',
  'logeqv',
  'logior',
  'lognand',
  'lognor',
  'lognot',
  'logorc1',
  'logorc2',
  'logtest',
  'logxor',
  'long-site-name',
  'lower-case-p',
  'machine-instance',
  'machine-type',
  'machine-version',
  'macroexpand',
  'macroexpand-1',
  'make-array',
  'make-broadcast-stream',
  'make-concatenated-stream',
  'make-condition',
  'make-dispatch-macro-character',
  'make-echo-stream',
  'make-hash-table',
  'make-list',
  'make-load-form-saving-slots',
  'make-package',
  'make-pathname',
  'make-random-state',
  'make-sequence',
  'make-string',
  'make-string-input-stream',
  'make-string-output-stream',
  'make-symbol',
  'make-synonym-stream',
  'make-two-way-stream',
  'makunbound',
  'map',
  'mapc',
  'mapcan',
  'mapcar',
  'mapcon',
  'maphash',
  'map-into',
  'mapl',
  'maplist',
  'max',
  'member-if',
  'member-if-not',
  'merge',
  'merge-pathnames',
  'method-combination-error',
  'min',
  'minusp',
  'mismatch',
  'name-char',
  'namestring',
  'nbutlast',
  'nconc',
  'nintersection',
  'notany',
  'notevery',
  'nreconc',
  'nreverse',
  'nset-difference',
  'nset-exclusive-or',
  'nstring-capitalize',
  'nstring-downcase',
  'nstring-upcase',
  'nsublis',
  'nsubst',
  'nsubst-if',
  'nsubst-if-not',
  'nsubstitute',
  'nsubstitute-if',
  'nsubstitute-if-not',
  'nthcdr',
  'numberp',
  'numerator',
  'nunion',
  'oddp',
  'open',
  'open-stream-p',
  'output-stream-p',
  'package-error-package',
  'package-name',
  'package-nicknames',
  'packagep',
  'package-shadowing-symbols',
  'package-used-by-list',
  'package-use-list',
  'pairlis',
  'parse-integer',
  'parse-namestring',
  'pathname-device',
  'pathname-directory',
  'pathname-host',
  'pathname-match-p',
  'pathname-name',
  'pathnamep',
  'pathname-type',
  'pathname-version',
  'peek-char',
  'phase',
  'plusp',
  'position',
  'position-if',
  'position-if-not',
  'pprint',
  'pprint-dispatch',
  'pprint-fill',
  'pprint-indent',
  'pprint-linear',
  'pprint-newline',
  'pprint-tab',
  'pprint-tabular',
  'prin1',
  'prin1-to-string',
  'princ',
  'princ-to-string',
  'print',
  'print-not-readable-object',
  'probe-file',
  'proclaim',
  'provide',
  'random',
  'random-state-p',
  'rassoc',
  'rassoc-if',
  'rassoc-if-not',
  'rationalize',
  'rationalp',
  'read',
  'read-byte',
  'read-char',
  'read-char-no-hang',
  'read-delimited-list',
  'read-from-string',
  'read-line',
  'read-preserving-whitespace',
  'read-sequence',
  'readtablep',
  'realp',
  'realpart',
  'reduce',
  'rem',
  'remhash',
  'remove',
  'remove-duplicates',
  'remove-if',
  'remove-if-not',
  'remprop',
  'rename-file',
  'rename-package',
  'replace',
  'require',
  'restart-name',
  'revappend',
  'reverse',
  'room',
  'round',
  'rplaca',
  'rplacd',
  'scale-float',
  'search',
  'set',
  'set-difference',
  'set-dispatch-macro-character',
  'set-exclusive-or',
  'set-macro-character',
  'set-pprint-dispatch',
  'set-syntax-from-char',
  'shadow',
  'shadowing-import',
  'short-site-name',
  'signal',
  'signum',
  'simple-bit-vector-p',
  'simple-condition-format-arguments',
  'simple-condition-format-control',
  'simple-string-p',
  'simple-vector-p',
  'sin',
  'sinh',
  'sleep',
  'slot-boundp',
  'slot-exists-p',
  'slot-makunbound',
  'slot-value',
  'software-type',
  'software-version',
  'some',
  'sort',
  'special-operator-p',
  'sqrt',
  'stable-sort',
  'standard-char-p',
  'stream-element-type',
  'stream-error-stream',
  'stream-external-format',
  'streamp',
  'string/=',
  'string<',
  'string<=',
  'string=',
  'string>',
  'string>=',
  'string-capitalize',
  'string-downcase',
  'string-equal',
  'string-greaterp',
  'string-left-trim',
  'string-lessp',
  'string-not-equal',
  'string-not-greaterp',
  'string-not-lessp',
  'stringp',
  'string-right-trim',
  'string-trim',
  'string-upcase',
  'sublis',
  'subsetp',
  'subst',
  'subst-if',
  'subst-if-not',
  'substitute',
  'substitute-if',
  'substitute-if-not',
  'subtypep',
  'sxhash',
  'symbol-name',
  'symbolp',
  'symbol-package',
  'synonym-stream-symbol',
  'tailp',
  'tan',
  'tanh',
  'terpri',
  'translate-logical-pathname',
  'translate-pathname',
  'tree-equal',
  'truename',
  'truncate',
  'two-way-stream-input-stream',
  'two-way-stream-output-stream',
  'type-error-datum',
  'type-error-expected-type',
  'type-of',
  'typep',
  'unbound-slot-instance',
  'unexport',
  'unintern',
  'union',
  'unread-char',
  'unuse-package',
  'upgraded-array-element-type',
  'upgraded-complex-part-type',
  'upper-case-p',
  'use-package',
  'user-homedir-pathname',
  'values-list',
  'vectorp',
  'vector-pop',
  'vector-push',
  'vector-push-extend',
  'warn',
  'wild-pathname-p',
  'write',
  'write-byte',
  'write-char',
  'write-line',
  'write-sequence',
  'write-string',
  'write-to-string',
  'yes-or-no-p',
  'y-or-n-p',
  'zerop',
  'abort',
  'continue',
  'muffle-warning',
  'store-value',
  'use-value',
  'logical-pathname',
  'character',
  'complex',
  'cons',
  'float',
  'list',
  'null',
  'pathname',
  'rational',
  'string',
  'vector',
  'eql',
  'member',
  'mod',
  'not',
  'atom',
  '-',
  '*',
  '/',
  '+'
];
const clLocalFunction: string[] = [
  'call-next-method',
  'next-method-p'
];
const clLocalMacro: string[] = [
  'call-method',
  'loop-finish',
  'make-method',
  'pprint-exit-if-list-exhausted',
  'pprint-pop'
];
const clMacro: string[] = [
  'assert',
  'case',
  'ccase',
  'check-type',
  'cond',
  'ctypecase',
  'decf',
  'declaim',
  'defclass',
  'defconstant',
  'defgeneric',
  'define-compiler-macro',
  'define-condition',
  'define-method-combination',
  'define-modify-macro',
  'define-setf-expander',
  'define-symbol-macro',
  'defmacro',
  'defmethod',
  'defpackage',
  'defparameter',
  'defsetf',
  'defstruct',
  'deftype',
  'defun',
  'defvar',
  'destructuring-bind',
  'do',
  'do*',
  'do-all-symbols',
  'do-external-symbols',
  'dolist',
  'do-symbols',
  'dotimes',
  'ecase',
  'etypecase',
  'formatter',
  'handler-bind',
  'handler-case',
  'ignore-errors',
  'incf',
  'in-package',
  'loop',
  'multiple-value-bind',
  'multiple-value-list',
  'multiple-value-setq',
  'nth-value',
  'otherwise',
  'pop',
  'pprint-logical-block',
  'print-unreadable-object',
  'prog',
  'prog*',
  'prog1',
  'prog2',
  'psetf',
  'psetq',
  'push',
  'pushnew',
  'remf',
  'restart-bind',
  'restart-case',
  'return',
  'rotatef',
  'shiftf',
  'step',
  'time',
  'trace',
  'typecase',
  'unless',
  'untrace',
  'when',
  'with-accessors',
  'with-compilation-unit',
  'with-condition-restarts',
  'with-hash-table-iterator',
  'with-input-from-string',
  'with-open-file',
  'with-open-stream',
  'with-output-to-string',
  'with-package-iterator',
  'with-simple-restart',
  'with-slots',
  'with-standard-io-syntax',
  'lambda',
  'setf',
  'and',
  'or'
];
const clMacroLambdaList: string[] = [
  '&body',
  '&environment',
  '&whole'
];
const clOrdinaryLambdaList: string[] = [
  '&allow-other-keys',
  '&aux',
  '&key',
  '&optional',
  '&rest'
];
const clSpecialForm: string[] = [
  'setq'
];
const clSpecialOperator: string[] = [
  'block',
  'catch',
  'eval-when',
  'flet',
  'go',
  'if',
  'labels',
  'let',
  'let*',
  'load-time-value',
  'locally',
  'macrolet',
  'multiple-value-call',
  'multiple-value-prog1',
  'progn',
  'progv',
  'quote',
  'return-from',
  'symbol-macrolet',
  'tagbody',
  'the',
  'throw',
  'unwind-protect',
  'function'
];
const clStandardGenericFunction: string[] = [
  'add-method',
  'allocate-instance',
  'change-class',
  'class-name',
  'compiler-macro',
  'compute-applicable-methods',
  'describe-object',
  'documentation',
  'find-method',
  'function-keywords',
  'initialize-instance',
  'make-instance',
  'make-instances-obsolete',
  'make-load-form',
  'method-qualifiers',
  'no-applicable-method',
  'no-next-method',
  'print-object',
  'reinitialize-instance',
  'remove-method',
  'shared-initialize',
  'slot-missing',
  'slot-unbound',
  'structure',
  'update-instance-for-different-class',
  'update-instance-for-redefined-class',
  'variable'
];
const clSymbol: string[] = [
  'declare',
  'method-combination'
];
const clSystemClass: string[] = [
  'array',
  'bit-vector',
  'broadcast-stream',
  'built-in-class',
  'class',
  'concatenated-stream',
  'echo-stream',
  'file-stream',
  'generic-function',
  'hash-table',
  'integer',
  'method',
  'number',
  'package',
  'random-state',
  'ratio',
  'readtable',
  'real',
  'restart',
  'sequence',
  'standard-class',
  'standard-generic-function',
  'standard-method',
  'stream',
  'string-stream',
  'structure-class',
  'symbol',
  'synonym-stream',
  'two-way-stream'
];
// Note `standard` is manually added.
const clType: string[] = [
  'base-char',
  'base-string',
  'bignum',
  'boolean',
  'compiled-function',
  'double-float',
  'extended-char',
  'fixnum',
  'keyword',
  'long-float',
  'short-float',
  'signed-byte',
  'simple-array',
  'simple-base-string',
  'simple-bit-vector',
  'simple-string',
  'simple-vector',
  'single-float',
  'standard',
  'standard-char',
  'unsigned-byte'
];
const clTypeSpecifier: string[] = [
  'satisfies'
];
const clVariable: string[] = [
  '**',
  '***',
  '*break-on-signals*',
  '*compile-file-pathname*',
  '*compile-file-truename*',
  '*compile-print*',
  '*compile-verbose*',
  '*debugger-hook*',
  '*debug-io*',
  '*default-pathname-defaults*',
  '*error-output*',
  '*features*',
  '*gensym-counter*',
  '*load-pathname*',
  '*load-print*',
  '*load-truename*',
  '*load-verbose*',
  '*macroexpand-hook*',
  '*modules*',
  '*package*',
  '*print-array*',
  '*print-base*',
  '*print-case*',
  '*print-circle*',
  '*print-escape*',
  '*print-gensym*',
  '*print-length*',
  '*print-level*',
  '*print-lines*',
  '*print-miser-width*',
  '*print-pprint-dispatch*',
  '*print-pretty*',
  '*print-radix*',
  '*print-readably*',
  '*print-right-margin*',
  '*query-io*',
  '*random-state*',
  '*read-base*',
  '*read-default-float-format*',
  '*read-eval*',
  '*read-suppress*',
  '*readtable*',
  '*standard-input*',
  '*standard-output*',
  '*terminal-io*',
  '*trace-output*',
  '//',
  '///',
  '++',
  '+++'
];

const enum ClSymbolKind {
  Accessor = 'Accessor',
  Class = 'Class',
  ConditionType = 'Condition Type',
  ConstantVariable = 'Constant Variable',
  Declaration = 'Declaration',
  Function = 'Function',
  LocalFunction = 'Local Function',
  LocalMacro = 'Local Macro',
  Macro = 'Macro',
  MacroLambdaList = 'Macro Lambda List',
  OrdinaryLambdaList = 'Ordinary Lambda List',
  SpecialForm = 'Special Form',
  SpecialOperator = 'Special Operator',
  StandardGenericFunction = 'Standard Generic Function',
  Symbol = 'Symbol',
  SystemClass = 'System Class',
  Type = 'Type',
  TypeSpecifier = 'Type Specifier',
  Variable = 'Variable'
}

const clOriSymbolsByKind: Map<ClSymbolKind, string[]> = new Map<ClSymbolKind, string[]>([
  [ClSymbolKind.Accessor, clAccessor],
  [ClSymbolKind.Class, clClass],
  [ClSymbolKind.ConditionType, clConditionType],
  [ClSymbolKind.ConstantVariable, clConstantVariable],
  [ClSymbolKind.Declaration, clDeclaration],
  [ClSymbolKind.Function, clFunction],
  [ClSymbolKind.LocalFunction, clLocalFunction],
  [ClSymbolKind.LocalMacro, clLocalMacro],
  [ClSymbolKind.Macro, clMacro],
  [ClSymbolKind.MacroLambdaList, clMacroLambdaList],
  [ClSymbolKind.OrdinaryLambdaList, clOrdinaryLambdaList],
  [ClSymbolKind.SpecialForm, clSpecialForm],
  [ClSymbolKind.SpecialOperator, clSpecialOperator],
  [ClSymbolKind.StandardGenericFunction, clStandardGenericFunction],
  [ClSymbolKind.Symbol, clSymbol],
  [ClSymbolKind.SystemClass, clSystemClass],
  [ClSymbolKind.Type, clType],
  [ClSymbolKind.TypeSpecifier, clTypeSpecifier],
  [ClSymbolKind.Variable, clVariable]
]);

export { clOriSymbolsByKind, ClSymbolKind };
